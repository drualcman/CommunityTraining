using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CommunityTraining.Exceptions
{
    public class ProblemDetails
    {
        /// <summary>
        //     A URI reference [RFC3986] that identifies the problem type. This specification
        //     encourages that, when dereferenced, it provide human-readable documentation for
        //     the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member
        //     is not present, its value is assumed to be "about:blank".
        /// </summary>
        public string Type { get; set; }
        /// <summary>
        //     A short, human-readable summary of the problem type.It SHOULD NOT change from
        //     occurrence to occurrence of the problem, except for purposes of localization(e.g.,
        //     using proactive content negotiation; see[RFC7231], Section 3.4).
        /// </summary>
        public string Title { get; set; }
        /// <summary>
        //     If it's from Fluent Validation must be send a 422 code([rfc7231], Section 6.5.6)
        //     The HTTP status code([RFC7231], Section 6) generated by the origin server for
        //     this occurrence of the problem.
        /// </summary>
        public int? Status { get; set; }
        /// <summary>
        //     A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        public string Detail { get; set; }
        /// <summary>
        //     A Object method or UIR reference that identifies the specific occurrence of the problem. It may
        //     or may not yield further information if dereferenced.
        /// </summary>
        public string Instance { get; set; }

        public override string ToString()
        {
            StringBuilder result = new StringBuilder();
            if (Status.HasValue)
            {
                if (Status.Value == 422)
                {
                    //from fluent validation
                    string[] properties = this.Title.Split(',', StringSplitOptions.RemoveEmptyEntries);
                    string[] errors = this.Detail.Split(',', StringSplitOptions.RemoveEmptyEntries);

                    int p = properties.Length;
                    int e = errors.Length;

                    if (p == e)
                    {
                        for (int i = 0; i < p; i++)
                        {
                            if (p > 1) result.AppendLine($"({Status.Value}) {properties[i]}: {errors[i]}");
                            else result.Append($"({Status.Value}) {properties[i]}: {errors[i]}");
                        }
                    }
                    else result.Append($"({Status.Value}) {this.Title}: {this.Detail}");
                }
                else result.Append($"({Status.Value}) {this.Title}: {this.Detail}");
            }
            else result.Append($"{this.Title}: {this.Detail}");
            
            return result.ToString();
        }
    }
}
